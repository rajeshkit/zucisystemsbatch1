Java is object oriented Language:-
=================================
	
	void main(){
	
	}
	
	class Demo{
		public static void main(String[] arg){
		}
	}

.java 
=====
	its an source code - high level language
.class
=======
	byte code instruction - it contains symbols and letters - 	intermediate language

	java Demo - Demo.class loaded into the class loader subsystem
	
jdk - javac, java, more - compiler, interepreter
jre - java - interpreter - JRE 
		
			sports.apk (.class)
			  |
			mobile (jre)
			  |
			play games
JRE - interepreter
JVM - class loader subsystem, runtime memeory area,engine- interpreter,jit compiler

IDE - Integrated Developement Environment - Eclipse,sts, Intelij, netbeans,jcreator
					    
	software

Keywords:-
	reserved keywords - all letters must be in lower case
	userdefined words - can be lowercase or upper case or camel case
		
	class name - camel case
		   - one word - starting letter must be in upper case
				remaining letter should be lower case 
		   - multiple words
			      - Each word starting letter must be upper 				case remaining letters must be in lower
				case
	method name - camel case
		   - one word - all letters must be in lower case ()
		   - multiple words - first word all letters in lower case
				      second word onward each word
				      starting letter must be in upper 				      		      case ()
			age();	
			findPersonAge();
	variable name - camel case or lower case
		   - one word - all letters must be in lower case
		   - multiple words - first word all letters in lower case
				      second word onward each word
				      starting letter must be in upper 				      		      case	
			age;
			personAge;
			customerAadharNumber;
			Constant variable:-
				All letters must be in upper case 				connected with underscore(_)

	package - all letters must be in lowercase
	
folder -> Project -> packages -> class(.java) files

Control Statements:-
	1.  Conditional control statement
		through condition going to control the statement  

		if(condition)
		{
			statement;
		}
		if(condition)
		{
			statement;
		}else{
		}
		switch(choice){
			case 1:
				statements:
			case 2:
				statements:
			default:
				statements;
		
		}
	2.  Unconditional statement
		without condition i can control the statement
		break;
		continue;
		can be used either in the looping or switch statement
Looping:-
	for
	while
	do while
	advanced for loop
	for each loop

	byte	1byte	8bits 
	short   2bytes  16bits
	int	4bytes	32bits
	long	8bytes	64bits
	float	4bytes	32bits
	double	8bytes	64bits
	char	2bytes	16bites
	boolean	1bit

	Datatypes
	1. primitive type
		byte,short,int,long,float, double,char,boolean
	2. Non primitive type
		other than 8 primitive type 
		String, Array
			int quantity;//primitive type
			String quantity;
			boolean s;
Array:-
	Collection of similar types
		int[] k=new int[5]; //collection 5 primitive values
		String[] name=new String[5];//collection 5 string non
					       primitve values
	array size is fixed. cannot increase or decrease
	continous memory  allocation		
	random access
	Array Operations:-
		1. sorting
		2. search
		3. fill
		4. suffle
		5. copy	
Functions or method:-
	* Functions are subprogram
	* Functions are used to perform a logic or task
	* icreased code reusability
	* saves time and effort
	* function name should be a verb
	* it is has to do a single responsibility task or logic
	
	Types of methods:
	1. function with no arg with no return type
	2. function with arg with no return type
	3. function with no arg with return type
	4. function with arg with return type


	public void login(){
		String username="rajesh";
		String password="rajesh123";
		// perform validation logic - data - username,password
	}
		
	public void login(String username,String password){
		// perform validation logic - data - username,password
	}
	public void calculateEmi(int amount,float roi,int tenure){
		// emi logic - amount,roi,tenure	
	}

Object Oriented Approach:-
		Object -  real world existing things are called object
		chair
		pen
		laptop
		employee
		bottle	
		transaction
		object contains properties, behaviour
		objects are made from class
		instance of a class called as object
		
Class:-
		class is a template or blueprint from which objects are 			made
		class contains a members
			- member variable - static member variable
					    instance variable
			- member function - static member function
					    instance variable
			- constructor	    
			- static block

			class ------------> object
			variable          properties 
			method	  	  behaviour

	Two types of classes:
	1. Userdefined class
	2. Predefined Class

	CarLoan is a Loan
	Car has a Engine
	
	Account -
				number
				name
				type
				balance
				login()
				updateProfile()
		
		class Account{
			int number; // member variable
			String name;// member variable
			String type;// member variable
			int balance;// member variable
			public void login(){ // member function
			}
			public void updateProfile(){// member function
			}
		}

		
		ICICI BANK   ---->  ZUCI SYSTEMS
			Approach + Java is programming language
		Requirement
			Object Oriented Approach
			
			Account - class diagram
				number
				name
				type
				balance
				login()
				updateProfile()
			Loan
				number
				type
				amount
				roi
				approval()
				closing()
				payment()
				
			Deposit
			Withdrawl
				amount
				atm
				balance
				doTrabsfer()
			Transaction
			Cheque
			CreditCard	
			DebitCard
			PinChange

		makemytrip	
			passenger
			booking
			payment
			transport
			train
			bus
			flight
			cancellation

			OOAD - Desing Document
				class diagram
				sequence diagram
				EER diagram
			developer
				- 
variable:-
	1. instance variable
		A variable declared inside the class outside of any method
		is called as instance variable
		scope - with in the class
		lifetime - till end of the class
	2. static variable
		A variable declared inside the class outside of any method
		with static keyword is called as static variable
		scope - with in the class
		lifetime - till end of the class
	3. local variable
		A variable declared inside the method or block is called
		as local variable
		scope - whith in method or block
		lifetime - till end of the method or block
	scope
	lifetime

	
create a class Phone 
create another class Samsung	
	access the members of phone class to samsung class using IS-A
create another class IPhone
	access the members of phone class to IPhone class using HAS-A

	class Phone{
		int age=45;//declaration and initialization
		Sysout
	}
Constructor:-
	* constructor is a special member function
	* constructor doesnot returns any value
	* constructor will be called automatically
	* constructor name should be as same as class name
	* overload the constructor
	* If the classes are in the inheritance constructor will not be
	  in inherited to another class
	* Constructor chaining
Encapsulation:-
	other program should not access the data member directly
	
	Booking, Order, Fund, Product, Patient
	class - variable private,
		no arg cons,
		arg cons, 
		getter / setter - POJO - Plain Old Java Object	
Access modifier:
	Visibility
	before variable, before method, before class / interface
		public 
		protected -  with in the class can access, 
			  otherclass / subclass from same package access
			  otherclass / subclass other package no access
			  subclass other package access
		default - package level access
			  with in the class can access, 
			  otherclass / subclass from same package access
			  otherclass / subclass other package no access
		private - only with in the class can access, 
			  otherclass / subclass from same package noaccess
			  otherclass / subclass other package no access
	variable:-	
		accessmodifier nonaccessmodifier type variablename;
	method:
		accessmodifier nonaccessmodifier returntype methodname(){
			//logic
		}
	class:
		accessmodifier nonaccessmodifier class ClassName{
			members
		}
	

	method:	
Non Access Modifier:
	it changes the default bheviour	
	zero or more
	static, final, synchronized, native,abstract etc.,

	static int age=9; //instance variable - heap
			  //method area



Packages:-
	java project
		- 500 .java files	

	iciciapp ----> www.icicibank.com		
	
			com.icicibank.account
				Account.java
				PinChange.java		
				Update.java
			com.icicibank.card
				CreditCard.java
				DebitCard.java
			com.icicibank.loan
				HousingLoan.java
				CarLoan.java
				GoldLoan.java	
Polymorphism:-
		many forms
		1. Compile time polymorphism
	           overloadding - method with same name with diff arg
		   compile time binding 
		   Early binding
		   static binding
		
		sendGift(byself){
			-----;
		}
		sendGift(friend){
			-----;
		}
		sendGift(courier){
			-----;
		}
		sendGift(postal){
			-----;
		}

		2. Runtime polymorpshim
		overriding -  method with same name same arg
		Runtime binding
		late binding
		dynamic binding
		
		sendGift(courier){
			-----;
		}
		sendGift(postal){
			-----;
		}

Task 1: Encapsulation vs Abstraction
Task 2: Type casting
Task 3: Object Casting 

Inheritance:-
	1. IS-A Inheritance (by using extends)
		1.1 single inheritence
		1.2 Multilevel iheritance
		1.3 Hierachial Inheritance
		1.4 Multiple Inheritance
		1.5 Hybrid Inheritance
	2. HAS-A Inheritance (creating an object of one class into 
 			     another class) (Association)

		2.1 Composition
		2.2 Aggregation
			One to One
			One to Many
			Many to One
			Many to Many
final keyword:-
	before variable - constant variable
	before method - cannot override
	before class - cannot be extended (IS-A inheritance)
Abstraction:-
	
	implementation  - complete implementation
	class conatins members 
	concrete class - all members are implemented and no abstract 			 methods
	abstract class - if any of the member is abstract then your
			 class is an abstract class		
		 	- If a class has atleast one abstract method 
			  then make your class as abstract class
	If a class is an abstract class cant create an object 
	for that class(Has-a inheritance). but you can make IS-A(extends)
interface:-
	if all the methods are abstract method make that as an interface
	By default interface is meant for abstraction	
	By default all the method inside the interface are public abstract
	methods then remove the abstract and public keyword

class -------> class		interface ------> class
      extends				implements

interface ---------> interface 
	   extends

Exception Handling:-
	Exception is an abnormal condition happens during runtime code 
	execution. If it happen the program will be terminated abrubtly
	
	jvm making an exception stops the program immediatly
	
	Now programmer handle the exception. to smoothly terminate
	the program and contious the code till in ends
	try{
		suspected code or anticipating the code that 
		created an exception
	}
	catch(exceptiontype){
		//handler
	}
	blocking - 
	Non blocking - 
	interuption
Mutitasking:-
	1.1 Multiprocessing
			Word,notepad,chrome,mspaint,intellj - Queue
		HD--> RAM --> Process --> 1
		Process is an heavyweight
		context switch very diffcult
			
	1.2 Multithreading
			Word.exe
				save - task - thread 1
				grammer - task - thread 2
				format - task - thread 3
				spell checking - task - thread 4
			save, grammer,format,spell,typing,paint,erase,
			draw  - queue 
				CPU scheduling algorithm
		HD --> RAM --> CPU(4)

		context switch
		queue
		priority
		shceduling algorithm
	
Java supports multithreading
		
		task - method
		thread --> task
		thread --> task
		Thread
		public void type(){//typing task
thread1 		1min		
		}
		public void grammer(){//grammer task
thread2			1min
		}

		public void autoSave(){//autosave task
thread3			1 min		
		}

		thread - many task
		many threads - task
How to create threads in java:-
	1. by extending a thread class
	2. by implementing runnable interface

	steps:
		1. create a thread 
		2. assign a task to a thread	run()
		3. start a thread
		4. interrupt the thread(option)
		5. you can also stop the thread(option)

	public class Demo implements Runnable{
	
	}
		Demo d=new Demo();
Java I/O Stream	API:-
=====================
	java.io package
	
	This package contains a relatively large number of classes that 		support input and output operations. 
	
	These classes may be categorized into groups based on the data 		type on which they operate.

	1. Byte Stream 
		Classes that provide support for handling I/O operations 			on bytes.(1 - byte 8 bits) -  raw data - image,audio,video
		1. InputStream - read - 8 bits
		2. OutputStream - write - 8 bits
	2. Character Stream 
		Classes that provide support for managing I/O operations 			on characters.(16 Unicode character)
		files which character - pdf , word, xsl
		1. Reader
		2. Writer
		

	byte stream ----> character stream
	character -----> byte stream

Serialization and De-serialization:-
API:- it is software used to connect with other system to exchange data
Java API- set of classes, interface, enums etc
String API- set of classes, interface, enums etc
Collection API:- 
JDBC API:- - set of classes, interface, enums etc
Array API:- 

Array:-
	group of similar values stored 
	primitive value
		int[] list=new int[5];
	reference value or object
		String[] names=new String[5];
		Employee[] employees=new Employee[5];
	continous memory allocation
	Linear Access or random access
	Array is fixed in size. cannot be increased or decreased 
	
	More no insertion / Deletion performance becomes low
LinkedList:-
	collection of nodes and links are called as linkedlist
	
	db
	  - productdetails
		-300        ------->  Product[] pro=new Product[100];
				      Collection - dynamic in size

Collection:-
	It holds group of similar object or non primitive variable
	dynamic in size
	Collection API - set of classes, interfaces etc we can
			 manage group
	Each collection holds one Datastructure to manage group of objects
	managing group of object:-
	1. Add
	2. Remove
	3. Move
	4. Replace
	5. Search
	6. sort
	7. get
	8. copy
	
iterator vs listIterator vs descendingIterator vs splitIterator

Arrays - util package
Comparable - interface - sorting logic
Comparator - interface - sorting logic

Java 8:-
	Functional interface:
		A interface has only one abstract method that is to be 		called as functional interface
	Lamda expression
		it's an expression it is an implementation of one abstract
		method from functional interface
	Java Stream API
	
	c=a+b;//expression
	Function or method:-
	public void add(int no1.int no2){
		System.out.println("add"+(no1+no2))
	}
	1. lamda expression doesnot take access and non access modifier	
	   lamda expression doesnot take any annotation
	2. lamda expression doesnot takes return type
	3. lamda expression doesnot takes method name
	4. lamda expression doesnot takes argument type
	5. lamda expression after the parameter includes -> (lamda 	   	operator)
	6. lamda expression body has only one statement you can remove
	   curly braces
	7. lamda expression body has only one statement that too return 	   statement. then you can also return keyword
		
	FunctionalInterface fi=(no1,no2)->no1+no2;
	
	Predefined Functional Interface
		Comparable
		Comparator
		Runnable
		Predicate<T> 	// boolean test(T t);
		Consumer<T>	// void accept(T t);
		Function<T,R> 	// R apply(T t);
		Supplier<T>	// T get();	

Data:-
	useful information is called as data
		6789 Tv 8484784 description 
Database:-
	Collection of useful information is called as database
	collection of tables
		6789 Tv 8484784 description 
		6789 Tv 8484784 description 
		6789 Tv 8484784 description 
		6789 Tv 8484784 description 
DBMS(Database management system):-
	It is software that manages your database	
	
	mysql, oracle, mongodb, sqlserver,postgresql
	
		data --------------> table structure
		row and colums		
RDBMS-Relational DBMS

	1. connect - ip:port
		     username
		     password	
	SQL Commands:-
	1. DDL - structure
		defining the structure or database
		1.1 create 
			CREATE TABLE tablename(columnname1 datatype(size),
			columnname2 datatype(size), etc);
			Eg:-
			CREATE TABLE employee(id number,name varchar(20),
			dob date,cgpa float);
			
		1.2 alter - add - add a new column or constraint
			  - modify - change existing column or constraint
			  - rename - change the columnname
			  - drop - drop a column or constraint 
		1.3 rename
		1.4 drop
		1.5 truncate
		1.6 desc 
	2. DML - data
		2.1 insert
			INSERT INTO tablename VALUES(value1,value2,..);
		2.2 select
			SELECT * FROM employee;
		2.3 update
			UPDATE tablename SET columnname=newvalue,
				columnname=newvalue,.. WHERE condition);
		2.4 delete
			DELETE FROM tablename WHERE condition;
	3. DCL
		3.1 grant
		3.2 revoke
	4. TCL	
		4.1 commit
		4.2 rollback
		4.3 savepoint

constraints:-
		1. domain constraint
			1.1 datatype
			1.2 size
		2. Integirity constraint
			2.1 unique - values must be different
				     accept null value
			2.2 not null - will not accept a null value
				       duplicate allow
			2.3 primary key - unique + not null
			2.4 foreign key - always referes to primary key
			2.5 default - 
			2.6 check or between

Field	Type		Null	Key	Default	Extra
id	int		NO		NULL	
email	varchar(25)	YES	UNI	NULL

	INSERT
	DELETE 
	UPDATE 
	SELECT
	
	Clauses:-
		filter and select something
		USE - filter and selects one database among many database
		SELECT - filter and select one or more rows from result
		FROM - filter and select one table from database			WHERE - filter and select a row(s) from the table
		Order by -  sorts in asc | desc based on one column		
		group by - filter the row(s) it makes a group
		having - filters the row(s)
			 having clause used along group by clause
Customers
customer_id	first_name	last_name	age	country
1		John		Doe		31	USA
2		Robert		Luna		22	USA
3		David		Robinson	22	UK
4		John		Reinhardt	25	UK
5		Betty		Doe		28	UAE

Subquery:-
	Writing a query with in a query is called sub query
	inner query and outter query
	Syntax:-
		outer	inner
		query(subquery)
	first it will execute inner query then result will be given to 
	outter query
	1. single row subquery
		query(subquery) - inner query return exactly one row
				  to the outer query
				=,>,<,>=,<=,!=
	2. multi row subquery	
		query(subquery) - inner query return more than one row
				  to the outer query
				IN. NOT, NOT IN,SOME,EXISTS
	3. correlated  subquery
  
Joins:-
=====
	SELECT columnnames FROM customers,orders;
	
	1. Inner join
		Equi Join
			Natural Join
		Non Equi Join	
		
		--SELECT customers.customer_id,first_name,item,amount FROM 		customers,orders WHERE 				Customers.customer_id=Orders.customer_id; 
		--theta style

		SELECT c.customer_id,first_name as name,item,amount FROM 			customers as c JOIN orders as o ON 				c.customer_id=o.customer_id;  --equi join

		--SELECT c.customer_id,first_name as name,item,amount FROM 		customers as c JOIN orders as o ON c.customer_id!				=o.customer_id; --non equi join 

		SELECT c.customer_id,first_name as name,item,amount FROM 			customers as c NATURAL JOIN orders as o; 
	2. outer join
		left outer join
		right outer join
		Full outer join - set - union, intersect,
	3. self join
		SELECT column_name(s) FROM table1 T1, table1 T2
		WHERE condition;
		SELECT A.CustomerName AS CustomerName1, B.CustomerName AS 		CustomerName2, A.City
		FROM Customers A, Customers B
		WHERE A.CustomerID <> B.CustomerID
		AND A.City = B.City
		ORDER BY A.City;
JDBC - Java Program Database connectivity:-
		java --> connection --> mysql(ip:port username,password)
		Statement or prepared statement or callable statement
		Query - execute()

		JDBC API - java.sql / javax.sql
			- classes and interface etc which help us
			  connect and execute queries any database
			DriverManager(c) - public static Connection
					  getConnection(url, user,pass)		
					  {
					  }
			Connection(I) - reference holds connection obj
			Statement(I)
			PreparedStatement(I)
			CallableStatement(I)
			Query execution
				execute()
				executeUpdate()
				executeQuery()
			ResultSet(I)
	1. static query
		query values applied directly on a query
		INSERT INTO restaurant(4554.'xyz','chennai',67854,'2012-			12-12');
	2. dynamic query			
		Query doesnot takes a value in the query. rather than
		value is supplied later 
		INSERT INTO restaurant VALUES(?,?,?,?,?);
			? - query parameter
			the value is supplied late time
	Query execution:-
			1. query parse
			2. query compile
			3. query execution plan
			4. cost least execution plan
			5. execute

	static query				dynamic query
	Statement				PreparedStatement
========================================================================
						Precompiled query
	1. query parse				1. query parse
	2. query compile			2. query compile
	3. query execution plan			3. query execution plan
	4. cost least execution plan		4. cost least execution 						           plan
	5. execute				5. execute
SQL Queries:-

	PL/SQL - Procedural langauge
		 c - procedural language
			function -  calculation
			procedure - task 
			variable
			logic
			function or procedure call
			argument pass
			
		public void main(int a,int b){
			return a+b;
		}		
	
		INSERT - Write -  int executeUpdate() - DML
		DELETE - Write - int executeUpdate() - DML
		UPDATE - Write - int executeUpdate() - DML
		SELECT - Read - ResultSet executeQuery() - DML
		boolean execute - read or write - DML,DDL 
Transaction:-
	
	a logical unit of work is a transaction
		
	Query - task
		permanent - commit
	Query - task
		permenant - commit
	Query - task 
		permenant - commit

	begin
		bal 5000			bal 100
		transfer 500			bal=bal+500
		bal = bal-500
		4500
	end;
		-commit
		-rollback

	A   			----    B
	bal 5000			bal 100
	transfer 500			bal=bal+500
	bal = bal-500
	4500
	ACID
		atomicity
		consistency
		isolation
			A     			B	
			x=500			READ X 500
			x=x+400
			x=900		
		Durability
		

	Refer : https://www.ibm.com/docs/en/i/7.3?topic=transactions-		transaction-isolation-levels

HTML:- hyper text markup language
	
	- consists of tag or element
	- define a structure of the document
	- make a content document
	
	<tagname attribute></tagname> or <elementname></elementname>
	</elementname>
	name=value
	<h1 align='center' style="">text</h1> ... <h6>text</h6>
	<p>text</p>
	<b></b> or <strong></strong>
	<i></i> or <em></em>
	<img></img>
	<a></a>
	</hr></br>
	HTML Forms:-
		USed to carry user date from the user input to the
		server
		
http://127.0.0.1:5500/registration.html?firstname=sdfsdfsd&password=456fsgg&age=44&gender=on&state=Telungana&qualification=on&qualification=on&address=fgdg%0D%0Asgs%0D%0Ag%0D%0Asdgsd%0D%0Ag
http://127.0.0.1:5500/registration.html
/registration.html - Resource Path 
registration.html - resource name
? - seperaor or delimeter - resource and query parameter
Query Paratmeter - Query Param name=value
& - delimeter or seperator between query parameter

CSS - cascading style sheet
	
	style rule
		selector{
			propertyname:value;
			propertyname:value;
			propertyname:value;
		}

		CSS:-
			inline 
				writing css rule near by html element
				with style attribute
			internal
				html document head <style></style>
			external
				seperate .css file will be created 
				style rule defined inside
				which ever html u want to apply those
				style in that document link it


			css selector:-
			1. element selector
			2. id selector(#)
			3. class selector(.)
	
	Html Elements:-
		Inline level element
			<b>,<i>,<span>
		block level element - Box Layout
			<div><p><h1>
		
	Bootstrap:-
	
		grid system
		flex
Javascript:-
	Its a scripting language
	it not a strict type language
	
	Datatypes:-
		primitive datatype
		number
		string
		boolean
		undefined
		null
		Non Primitive 

		array
			var marks=[456,344,6767,6767,7878,454]
		object
		



		Inline
		Internal
			<script></script>
		External
			.js 
	Arrays
	Objects
		
	
	Event Handle
	Form Validation
	DOM Manipulation - js 
			
Jsp - Java Server Pages
	html inside java
	is nothing but it is a servlet
	jsp tag:-
		scriptlet tag
			<% java code %>
		expression tag =
 			<%= java code %>
		declaration !
		directive tag <%@ page %>
			1. page <%@ page %>
			2. include <%@ include %>
			3. taglib <%@ taglib %>
		

		jstl
			core
			format
			xml
			sql
JPA:-(Java Persistence API) - what
	It is a specification how java object can be mapped and managed 	
	to a relation table 
	Interfaces - abstract methods	
	Hibernate, EclipseLink,iBatis,topLink			
Hibernate:-
	Implements JPA specification
	Hibernate - JPA provider
	Hibernate is an ORM tool
	Java Object -----> maps to into a table
	ORM - Object Relational Mapping
	ORM implementation
	classname	 mapping		tablename
	datatype				column datatype
	variable				column name
	constructor				
	methods
		
	

	
	Configuration(C) - hibernate.cfg.xml 
	SessionFactory - Takes configuration as input
	Session - with the help of session factory it creates a session
		  connection to the database
	Transaction - commit, rollbck
	session 
Lombok framework:-
		

Hibernate relationship:-
	Entity classes has - a reference
	Add annotation JPA relationship annotation		
	other side java object persist first
	then persist object
	1. Unidirectional
	2. Bidirectional

public interface Payment {
 public void payMoney();
}
public interface CardPayment{
	public void getRewardPoints();
}
public interface UPI{
	 public void getScratchCard();
}		
class UPIPayment implements Payment,UPI{
	public void payMoney(){}
 	public void getScratchCard(){}
}
class CrediCardPayment implements Payment,CardPayment{
	public void payMoney(){}
 	public void getRewardPoints(){}
}

Dependency Inversion Principles:-
================================
	A 	 ---- 		 B
	B b=new B(); 

IOC Container:
	Inversion of control container
	1. Bean Factory
	2. Application Context

		Bean Factory(I) - spring IOC container
		     |
		     | extends
	    Application Context(I)

	class ClassPathXmlApplicationContext implements ApplicationCotext{
		
	}
		

ApplicationContext ac=new ClassPathXmlApplicationContext();




	class AnnotationApplicationContext implements ApplicationCotext{
		
	}

Bean Configuration:
	1. XML Bean Configuration + XML Bean Defintion 
	2. XML Bean Configuration + Annotation Bean Defintion
	3. Java Bean Configuration + Annotation Bean Defintion
	   @Configuration			@Component

						@Bean 

Dependency Injection
	
		Product product=new Product();
			constructor
			getter / setter

















